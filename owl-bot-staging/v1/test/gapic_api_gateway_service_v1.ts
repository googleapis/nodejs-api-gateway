// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as apigatewayserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.ApiGatewayServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = apigatewayserviceModule.v1.ApiGatewayServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = apigatewayserviceModule.v1.ApiGatewayServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = apigatewayserviceModule.v1.ApiGatewayServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.apiGatewayServiceStub, undefined);
        await client.initialize();
        assert(client.apiGatewayServiceStub);
    });

    it('has close method', () => {
        const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getGateway', () => {
        it('invokes getGateway without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetGatewayRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway());
            client.innerApiCalls.getGateway = stubSimpleCall(expectedResponse);
            const [response] = await client.getGateway(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getGateway without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetGatewayRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway());
            client.innerApiCalls.getGateway = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getGateway(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigateway.v1.IGateway|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getGateway with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetGatewayRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getGateway = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getGateway(request), expectedError);
            assert((client.innerApiCalls.getGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getApi', () => {
        it('invokes getApi without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetApiRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigateway.v1.Api());
            client.innerApiCalls.getApi = stubSimpleCall(expectedResponse);
            const [response] = await client.getApi(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getApi without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetApiRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigateway.v1.Api());
            client.innerApiCalls.getApi = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getApi(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigateway.v1.IApi|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getApi with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetApiRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getApi = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getApi(request), expectedError);
            assert((client.innerApiCalls.getApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getApiConfig', () => {
        it('invokes getApiConfig without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetApiConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig());
            client.innerApiCalls.getApiConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getApiConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getApiConfig without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetApiConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig());
            client.innerApiCalls.getApiConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getApiConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigateway.v1.IApiConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getApiConfig with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.GetApiConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getApiConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getApiConfig(request), expectedError);
            assert((client.innerApiCalls.getApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createGateway', () => {
        it('invokes createGateway without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateGatewayRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createGateway = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createGateway(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createGateway without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateGatewayRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createGateway = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createGateway(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createGateway with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateGatewayRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createGateway = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createGateway(request), expectedError);
            assert((client.innerApiCalls.createGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createGateway with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateGatewayRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createGateway = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createGateway(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateGatewayProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateGatewayProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateGatewayProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateGatewayProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateGateway', () => {
        it('invokes updateGateway without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateGatewayRequest());
            request.gateway = {};
            request.gateway.name = '';
            const expectedHeaderRequestParams = "gateway.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateGateway = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateGateway(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateGateway without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateGatewayRequest());
            request.gateway = {};
            request.gateway.name = '';
            const expectedHeaderRequestParams = "gateway.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateGateway = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateGateway(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.apigateway.v1.IGateway, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateGateway with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateGatewayRequest());
            request.gateway = {};
            request.gateway.name = '';
            const expectedHeaderRequestParams = "gateway.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateGateway = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateGateway(request), expectedError);
            assert((client.innerApiCalls.updateGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateGateway with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateGatewayRequest());
            request.gateway = {};
            request.gateway.name = '';
            const expectedHeaderRequestParams = "gateway.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateGateway = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateGateway(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateGatewayProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateGatewayProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateGatewayProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateGatewayProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteGateway', () => {
        it('invokes deleteGateway without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteGatewayRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteGateway = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteGateway(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteGateway without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteGatewayRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteGateway = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteGateway(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteGateway with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteGatewayRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteGateway = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteGateway(request), expectedError);
            assert((client.innerApiCalls.deleteGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteGateway with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteGatewayRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteGateway = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteGateway(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteGateway as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteGatewayProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteGatewayProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteGatewayProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteGatewayProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createApi', () => {
        it('invokes createApi without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createApi = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createApi(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createApi without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createApi = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createApi(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createApi with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createApi = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createApi(request), expectedError);
            assert((client.innerApiCalls.createApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createApi with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createApi = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createApi(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateApiProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateApiProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateApiProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateApiProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateApi', () => {
        it('invokes updateApi without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiRequest());
            request.api = {};
            request.api.name = '';
            const expectedHeaderRequestParams = "api.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateApi = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateApi(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateApi without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiRequest());
            request.api = {};
            request.api.name = '';
            const expectedHeaderRequestParams = "api.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateApi = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateApi(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.apigateway.v1.IApi, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateApi with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiRequest());
            request.api = {};
            request.api.name = '';
            const expectedHeaderRequestParams = "api.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApi = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateApi(request), expectedError);
            assert((client.innerApiCalls.updateApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateApi with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiRequest());
            request.api = {};
            request.api.name = '';
            const expectedHeaderRequestParams = "api.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApi = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateApi(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateApiProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateApiProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateApiProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateApiProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteApi', () => {
        it('invokes deleteApi without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteApi = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteApi(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteApi without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteApi = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteApi(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteApi with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApi = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteApi(request), expectedError);
            assert((client.innerApiCalls.deleteApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteApi with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApi = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteApi(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteApi as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteApiProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteApiProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteApiProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteApiProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createApiConfig', () => {
        it('invokes createApiConfig without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiConfigRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createApiConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createApiConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createApiConfig without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiConfigRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createApiConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createApiConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createApiConfig with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiConfigRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createApiConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createApiConfig(request), expectedError);
            assert((client.innerApiCalls.createApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createApiConfig with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.CreateApiConfigRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createApiConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createApiConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateApiConfigProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateApiConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateApiConfigProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateApiConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateApiConfig', () => {
        it('invokes updateApiConfig without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest());
            request.apiConfig = {};
            request.apiConfig.name = '';
            const expectedHeaderRequestParams = "api_config.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateApiConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateApiConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateApiConfig without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest());
            request.apiConfig = {};
            request.apiConfig.name = '';
            const expectedHeaderRequestParams = "api_config.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateApiConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateApiConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.apigateway.v1.IApiConfig, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateApiConfig with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest());
            request.apiConfig = {};
            request.apiConfig.name = '';
            const expectedHeaderRequestParams = "api_config.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApiConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateApiConfig(request), expectedError);
            assert((client.innerApiCalls.updateApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateApiConfig with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.UpdateApiConfigRequest());
            request.apiConfig = {};
            request.apiConfig.name = '';
            const expectedHeaderRequestParams = "api_config.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateApiConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateApiConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateApiConfigProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateApiConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateApiConfigProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateApiConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteApiConfig', () => {
        it('invokes deleteApiConfig without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteApiConfig = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteApiConfig(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteApiConfig without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteApiConfig = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteApiConfig(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.apigateway.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteApiConfig with call error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApiConfig = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteApiConfig(request), expectedError);
            assert((client.innerApiCalls.deleteApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteApiConfig with LRO error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.DeleteApiConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteApiConfig = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteApiConfig(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteApiConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteApiConfigProgress without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteApiConfigProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteApiConfigProgress with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteApiConfigProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listGateways', () => {
        it('invokes listGateways without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListGatewaysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
            ];
            client.innerApiCalls.listGateways = stubSimpleCall(expectedResponse);
            const [response] = await client.listGateways(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listGateways as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listGateways without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListGatewaysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
            ];
            client.innerApiCalls.listGateways = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listGateways(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigateway.v1.IGateway[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listGateways as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listGateways with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListGatewaysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listGateways = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listGateways(request), expectedError);
            assert((client.innerApiCalls.listGateways as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listGatewaysStream without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListGatewaysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
            ];
            client.descriptors.page.listGateways.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listGatewaysStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigateway.v1.Gateway[] = [];
                stream.on('data', (response: protos.google.cloud.apigateway.v1.Gateway) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listGateways.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGateways, request));
            assert.strictEqual(
                (client.descriptors.page.listGateways.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listGatewaysStream with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListGatewaysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listGateways.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listGatewaysStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigateway.v1.Gateway[] = [];
                stream.on('data', (response: protos.google.cloud.apigateway.v1.Gateway) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listGateways.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGateways, request));
            assert.strictEqual(
                (client.descriptors.page.listGateways.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listGateways without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListGatewaysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Gateway()),
            ];
            client.descriptors.page.listGateways.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.apigateway.v1.IGateway[] = [];
            const iterable = client.listGatewaysAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listGateways.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listGateways.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listGateways with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListGatewaysRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listGateways.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listGatewaysAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.apigateway.v1.IGateway[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listGateways.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listGateways.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listApis', () => {
        it('invokes listApis without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
            ];
            client.innerApiCalls.listApis = stubSimpleCall(expectedResponse);
            const [response] = await client.listApis(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listApis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listApis without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
            ];
            client.innerApiCalls.listApis = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listApis(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigateway.v1.IApi[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listApis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listApis with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listApis = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listApis(request), expectedError);
            assert((client.innerApiCalls.listApis as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listApisStream without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
            ];
            client.descriptors.page.listApis.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listApisStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigateway.v1.Api[] = [];
                stream.on('data', (response: protos.google.cloud.apigateway.v1.Api) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listApis.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApis, request));
            assert.strictEqual(
                (client.descriptors.page.listApis.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listApisStream with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listApis.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listApisStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigateway.v1.Api[] = [];
                stream.on('data', (response: protos.google.cloud.apigateway.v1.Api) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listApis.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApis, request));
            assert.strictEqual(
                (client.descriptors.page.listApis.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listApis without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.Api()),
            ];
            client.descriptors.page.listApis.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.apigateway.v1.IApi[] = [];
            const iterable = client.listApisAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listApis.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listApis.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listApis with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApisRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listApis.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listApisAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.apigateway.v1.IApi[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listApis.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listApis.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listApiConfigs', () => {
        it('invokes listApiConfigs without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApiConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
            ];
            client.innerApiCalls.listApiConfigs = stubSimpleCall(expectedResponse);
            const [response] = await client.listApiConfigs(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listApiConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listApiConfigs without error using callback', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApiConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
            ];
            client.innerApiCalls.listApiConfigs = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listApiConfigs(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.apigateway.v1.IApiConfig[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listApiConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listApiConfigs with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApiConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listApiConfigs = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listApiConfigs(request), expectedError);
            assert((client.innerApiCalls.listApiConfigs as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listApiConfigsStream without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApiConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
            ];
            client.descriptors.page.listApiConfigs.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listApiConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigateway.v1.ApiConfig[] = [];
                stream.on('data', (response: protos.google.cloud.apigateway.v1.ApiConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listApiConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApiConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listApiConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listApiConfigsStream with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApiConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listApiConfigs.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listApiConfigsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.apigateway.v1.ApiConfig[] = [];
                stream.on('data', (response: protos.google.cloud.apigateway.v1.ApiConfig) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listApiConfigs.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listApiConfigs, request));
            assert.strictEqual(
                (client.descriptors.page.listApiConfigs.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listApiConfigs without error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApiConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
              generateSampleMessage(new protos.google.cloud.apigateway.v1.ApiConfig()),
            ];
            client.descriptors.page.listApiConfigs.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.apigateway.v1.IApiConfig[] = [];
            const iterable = client.listApiConfigsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listApiConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listApiConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listApiConfigs with error', async () => {
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.apigateway.v1.ListApiConfigsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listApiConfigs.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listApiConfigsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.apigateway.v1.IApiConfig[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listApiConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listApiConfigs.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('api', () => {
            const fakePath = "/rendered/path/api";
            const expectedParameters = {
                project: "projectValue",
                api: "apiValue",
            };
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.apiPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.apiPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('apiPath', () => {
                const result = client.apiPath("projectValue", "apiValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.apiPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApiName', () => {
                const result = client.matchProjectFromApiName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.apiPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromApiName', () => {
                const result = client.matchApiFromApiName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.apiPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('apiConfig', () => {
            const fakePath = "/rendered/path/apiConfig";
            const expectedParameters = {
                project: "projectValue",
                api: "apiValue",
                api_config: "apiConfigValue",
            };
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.apiConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.apiConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('apiConfigPath', () => {
                const result = client.apiConfigPath("projectValue", "apiValue", "apiConfigValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.apiConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromApiConfigName', () => {
                const result = client.matchProjectFromApiConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.apiConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiFromApiConfigName', () => {
                const result = client.matchApiFromApiConfigName(fakePath);
                assert.strictEqual(result, "apiValue");
                assert((client.pathTemplates.apiConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchApiConfigFromApiConfigName', () => {
                const result = client.matchApiConfigFromApiConfigName(fakePath);
                assert.strictEqual(result, "apiConfigValue");
                assert((client.pathTemplates.apiConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('gateway', () => {
            const fakePath = "/rendered/path/gateway";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                gateway: "gatewayValue",
            };
            const client = new apigatewayserviceModule.v1.ApiGatewayServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.gatewayPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.gatewayPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('gatewayPath', () => {
                const result = client.gatewayPath("projectValue", "locationValue", "gatewayValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.gatewayPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromGatewayName', () => {
                const result = client.matchProjectFromGatewayName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.gatewayPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromGatewayName', () => {
                const result = client.matchLocationFromGatewayName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.gatewayPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGatewayFromGatewayName', () => {
                const result = client.matchGatewayFromGatewayName(fakePath);
                assert.strictEqual(result, "gatewayValue");
                assert((client.pathTemplates.gatewayPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
